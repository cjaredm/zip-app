# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  isAdmin: Boolean
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  isAdmin: Boolean
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  isAdmin: Boolean
  password: String
}

type Family {
  id: ID!
  label: String
  lastname: String
  status: String
  primary_phone: String
  secondary_phone: String
  primary_email: String
  secondary_email: String
  zone: Zone
  address: String
  city: String
  state: String
  zip: String
  preference: String
  members(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  membersCount(where: MemberWhereInput! = {}): Int
  students(
    where: StudentWhereInput! = {}
    orderBy: [StudentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Student!]
  studentsCount(where: StudentWhereInput! = {}): Int
  groups(
    where: GroupWhereInput! = {}
    orderBy: [GroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Group!]
  groupsCount(where: GroupWhereInput! = {}): Int
  smoking: Boolean
  pets: String
  referral: String
  student_survey: String
  notes: String
}

input FamilyWhereUniqueInput {
  id: ID
}

input FamilyWhereInput {
  AND: [FamilyWhereInput!]
  OR: [FamilyWhereInput!]
  NOT: [FamilyWhereInput!]
  id: IDFilter
  label: StringFilter
  lastname: StringFilter
  status: StringNullableFilter
  primary_phone: StringFilter
  secondary_phone: StringFilter
  primary_email: StringFilter
  secondary_email: StringFilter
  zone: ZoneWhereInput
  address: StringFilter
  city: StringFilter
  state: StringFilter
  zip: StringFilter
  preference: StringNullableFilter
  members: MemberManyRelationFilter
  students: StudentManyRelationFilter
  groups: GroupManyRelationFilter
  smoking: BooleanFilter
  pets: StringFilter
  referral: StringFilter
  student_survey: StringFilter
  notes: StringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input MemberManyRelationFilter {
  every: MemberWhereInput
  some: MemberWhereInput
  none: MemberWhereInput
}

input StudentManyRelationFilter {
  every: StudentWhereInput
  some: StudentWhereInput
  none: StudentWhereInput
}

input GroupManyRelationFilter {
  every: GroupWhereInput
  some: GroupWhereInput
  none: GroupWhereInput
}

input FamilyOrderByInput {
  id: OrderDirection
  label: OrderDirection
  lastname: OrderDirection
  status: OrderDirection
  primary_phone: OrderDirection
  secondary_phone: OrderDirection
  primary_email: OrderDirection
  secondary_email: OrderDirection
  address: OrderDirection
  city: OrderDirection
  state: OrderDirection
  zip: OrderDirection
  preference: OrderDirection
  smoking: OrderDirection
  pets: OrderDirection
  referral: OrderDirection
  student_survey: OrderDirection
  notes: OrderDirection
}

input FamilyUpdateInput {
  label: String
  lastname: String
  status: String
  primary_phone: String
  secondary_phone: String
  primary_email: String
  secondary_email: String
  zone: ZoneRelateToOneForUpdateInput
  address: String
  city: String
  state: String
  zip: String
  preference: String
  members: MemberRelateToManyForUpdateInput
  students: StudentRelateToManyForUpdateInput
  groups: GroupRelateToManyForUpdateInput
  smoking: Boolean
  pets: String
  referral: String
  student_survey: String
  notes: String
}

input ZoneRelateToOneForUpdateInput {
  create: ZoneCreateInput
  connect: ZoneWhereUniqueInput
  disconnect: Boolean
}

input MemberRelateToManyForUpdateInput {
  disconnect: [MemberWhereUniqueInput!]
  set: [MemberWhereUniqueInput!]
  create: [MemberCreateInput!]
  connect: [MemberWhereUniqueInput!]
}

input StudentRelateToManyForUpdateInput {
  disconnect: [StudentWhereUniqueInput!]
  set: [StudentWhereUniqueInput!]
  create: [StudentCreateInput!]
  connect: [StudentWhereUniqueInput!]
}

input GroupRelateToManyForUpdateInput {
  disconnect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  create: [GroupCreateInput!]
  connect: [GroupWhereUniqueInput!]
}

input FamilyUpdateArgs {
  where: FamilyWhereUniqueInput!
  data: FamilyUpdateInput!
}

input FamilyCreateInput {
  label: String
  lastname: String
  status: String
  primary_phone: String
  secondary_phone: String
  primary_email: String
  secondary_email: String
  zone: ZoneRelateToOneForCreateInput
  address: String
  city: String
  state: String
  zip: String
  preference: String
  members: MemberRelateToManyForCreateInput
  students: StudentRelateToManyForCreateInput
  groups: GroupRelateToManyForCreateInput
  smoking: Boolean
  pets: String
  referral: String
  student_survey: String
  notes: String
}

input ZoneRelateToOneForCreateInput {
  create: ZoneCreateInput
  connect: ZoneWhereUniqueInput
}

input MemberRelateToManyForCreateInput {
  create: [MemberCreateInput!]
  connect: [MemberWhereUniqueInput!]
}

input StudentRelateToManyForCreateInput {
  create: [StudentCreateInput!]
  connect: [StudentWhereUniqueInput!]
}

input GroupRelateToManyForCreateInput {
  create: [GroupCreateInput!]
  connect: [GroupWhereUniqueInput!]
}

type Member {
  id: ID!
  label: String
  firstname: String
  relation: String
  year_of_birth: String
  interests: String
  family: Family
}

input MemberWhereUniqueInput {
  id: ID
}

input MemberWhereInput {
  AND: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
  id: IDFilter
  label: StringFilter
  firstname: StringFilter
  relation: StringNullableFilter
  year_of_birth: StringFilter
  interests: StringFilter
  family: FamilyWhereInput
}

input MemberOrderByInput {
  id: OrderDirection
  label: OrderDirection
  firstname: OrderDirection
  relation: OrderDirection
  year_of_birth: OrderDirection
  interests: OrderDirection
}

input MemberUpdateInput {
  label: String
  firstname: String
  relation: String
  year_of_birth: String
  interests: String
  family: FamilyRelateToOneForUpdateInput
}

input FamilyRelateToOneForUpdateInput {
  create: FamilyCreateInput
  connect: FamilyWhereUniqueInput
  disconnect: Boolean
}

input MemberUpdateArgs {
  where: MemberWhereUniqueInput!
  data: MemberUpdateInput!
}

input MemberCreateInput {
  label: String
  firstname: String
  relation: String
  year_of_birth: String
  interests: String
  family: FamilyRelateToOneForCreateInput
}

input FamilyRelateToOneForCreateInput {
  create: FamilyCreateInput
  connect: FamilyWhereUniqueInput
}

type Group {
  id: ID!
  label: String
  name: String
  status: String
  families(
    where: FamilyWhereInput! = {}
    orderBy: [FamilyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Family!]
  familiesCount(where: FamilyWhereInput! = {}): Int
  students(
    where: StudentWhereInput! = {}
    orderBy: [StudentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Student!]
  studentsCount(where: StudentWhereInput! = {}): Int
}

input GroupWhereUniqueInput {
  id: ID
  name: String
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IDFilter
  label: StringFilter
  name: StringFilter
  status: StringNullableFilter
  families: FamilyManyRelationFilter
  students: StudentManyRelationFilter
}

input FamilyManyRelationFilter {
  every: FamilyWhereInput
  some: FamilyWhereInput
  none: FamilyWhereInput
}

input GroupOrderByInput {
  id: OrderDirection
  label: OrderDirection
  name: OrderDirection
  status: OrderDirection
}

input GroupUpdateInput {
  label: String
  name: String
  status: String
  families: FamilyRelateToManyForUpdateInput
  students: StudentRelateToManyForUpdateInput
}

input FamilyRelateToManyForUpdateInput {
  disconnect: [FamilyWhereUniqueInput!]
  set: [FamilyWhereUniqueInput!]
  create: [FamilyCreateInput!]
  connect: [FamilyWhereUniqueInput!]
}

input GroupUpdateArgs {
  where: GroupWhereUniqueInput!
  data: GroupUpdateInput!
}

input GroupCreateInput {
  label: String
  name: String
  status: String
  families: FamilyRelateToManyForCreateInput
  students: StudentRelateToManyForCreateInput
}

input FamilyRelateToManyForCreateInput {
  create: [FamilyCreateInput!]
  connect: [FamilyWhereUniqueInput!]
}

type Zone {
  id: ID!
  name: String
  families: Family
}

input ZoneWhereUniqueInput {
  id: ID
  name: String
}

input ZoneWhereInput {
  AND: [ZoneWhereInput!]
  OR: [ZoneWhereInput!]
  NOT: [ZoneWhereInput!]
  id: IDFilter
  name: StringFilter
  families: FamilyWhereInput
}

input ZoneOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ZoneUpdateInput {
  name: String
  families: FamilyRelateToOneForUpdateInput
}

input ZoneUpdateArgs {
  where: ZoneWhereUniqueInput!
  data: ZoneUpdateInput!
}

input ZoneCreateInput {
  name: String
  families: FamilyRelateToOneForCreateInput
}

type Student {
  id: ID!
  label: String
  lastname: String
  firstname: String
  gender: String
  families(
    where: FamilyWhereInput! = {}
    orderBy: [FamilyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Family!]
  familiesCount(where: FamilyWhereInput! = {}): Int
  group: Group
}

input StudentWhereUniqueInput {
  id: ID
}

input StudentWhereInput {
  AND: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  NOT: [StudentWhereInput!]
  id: IDFilter
  label: StringFilter
  lastname: StringFilter
  firstname: StringFilter
  gender: StringNullableFilter
  families: FamilyManyRelationFilter
  group: GroupWhereInput
}

input StudentOrderByInput {
  id: OrderDirection
  label: OrderDirection
  lastname: OrderDirection
  firstname: OrderDirection
  gender: OrderDirection
}

input StudentUpdateInput {
  label: String
  lastname: String
  firstname: String
  gender: String
  families: FamilyRelateToManyForUpdateInput
  group: GroupRelateToOneForUpdateInput
}

input GroupRelateToOneForUpdateInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
}

input StudentUpdateArgs {
  where: StudentWhereUniqueInput!
  data: StudentUpdateInput!
}

input StudentCreateInput {
  label: String
  lastname: String
  firstname: String
  gender: String
  families: FamilyRelateToManyForCreateInput
  group: GroupRelateToOneForCreateInput
}

input GroupRelateToOneForCreateInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createFamily(data: FamilyCreateInput!): Family
  createFamilies(data: [FamilyCreateInput!]!): [Family]
  updateFamily(where: FamilyWhereUniqueInput!, data: FamilyUpdateInput!): Family
  updateFamilies(data: [FamilyUpdateArgs!]!): [Family]
  deleteFamily(where: FamilyWhereUniqueInput!): Family
  deleteFamilies(where: [FamilyWhereUniqueInput!]!): [Family]
  createMember(data: MemberCreateInput!): Member
  createMembers(data: [MemberCreateInput!]!): [Member]
  updateMember(where: MemberWhereUniqueInput!, data: MemberUpdateInput!): Member
  updateMembers(data: [MemberUpdateArgs!]!): [Member]
  deleteMember(where: MemberWhereUniqueInput!): Member
  deleteMembers(where: [MemberWhereUniqueInput!]!): [Member]
  createGroup(data: GroupCreateInput!): Group
  createGroups(data: [GroupCreateInput!]!): [Group]
  updateGroup(where: GroupWhereUniqueInput!, data: GroupUpdateInput!): Group
  updateGroups(data: [GroupUpdateArgs!]!): [Group]
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteGroups(where: [GroupWhereUniqueInput!]!): [Group]
  createZone(data: ZoneCreateInput!): Zone
  createZones(data: [ZoneCreateInput!]!): [Zone]
  updateZone(where: ZoneWhereUniqueInput!, data: ZoneUpdateInput!): Zone
  updateZones(data: [ZoneUpdateArgs!]!): [Zone]
  deleteZone(where: ZoneWhereUniqueInput!): Zone
  deleteZones(where: [ZoneWhereUniqueInput!]!): [Zone]
  createStudent(data: StudentCreateInput!): Student
  createStudents(data: [StudentCreateInput!]!): [Student]
  updateStudent(
    where: StudentWhereUniqueInput!
    data: StudentUpdateInput!
  ): Student
  updateStudents(data: [StudentUpdateArgs!]!): [Student]
  deleteStudent(where: StudentWhereUniqueInput!): Student
  deleteStudents(where: [StudentWhereUniqueInput!]!): [Student]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  families(
    where: FamilyWhereInput! = {}
    orderBy: [FamilyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Family!]
  family(where: FamilyWhereUniqueInput!): Family
  familiesCount(where: FamilyWhereInput! = {}): Int
  members(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  member(where: MemberWhereUniqueInput!): Member
  membersCount(where: MemberWhereInput! = {}): Int
  groups(
    where: GroupWhereInput! = {}
    orderBy: [GroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Group!]
  group(where: GroupWhereUniqueInput!): Group
  groupsCount(where: GroupWhereInput! = {}): Int
  zones(
    where: ZoneWhereInput! = {}
    orderBy: [ZoneOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Zone!]
  zone(where: ZoneWhereUniqueInput!): Zone
  zonesCount(where: ZoneWhereInput! = {}): Int
  students(
    where: StudentWhereInput! = {}
    orderBy: [StudentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Student!]
  student(where: StudentWhereUniqueInput!): Student
  studentsCount(where: StudentWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
